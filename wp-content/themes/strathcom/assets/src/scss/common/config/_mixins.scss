
// Breakpoint indicator

@mixin breakpoint-indicator {
	body::after {
		position: fixed;
		bottom: 0;
		right: 0;
		z-index: 1001;
		color: #fff;
		background: rgba(0, 0, 0, 0.8);
		opacity: 0.8;
		font: 12px/12px sans-serif;
		padding: 0.5em 0.75em;
		pointer-events: none;

		@each $breakpoint-name, $breakpoint-value in $grid-breakpoints {

			@include media-breakpoint-up($breakpoint-name) {
				content: "#{$breakpoint-name} / min-width: #{$breakpoint-value}";
			}
		}
	}
}
// Reset lists

@mixin reset-list($margin: 0, $padding: 0) {
	margin: $margin;
	padding: $padding;
	list-style: none;
}
// Arrows

@mixin arrow($width: 20px, $height: 20px, $direction: up, $color: $brand-primary) {
	width: 0;
	height: 0;

	// Right

	@if $direction == right {
		border-top: $height / 2 solid transparent;
		border-bottom: $height / 2 solid transparent;
		border-left: $width solid $color;
	}

	// Left

	@if $direction == left {
		border-top: $height / 2 solid transparent;
		border-bottom: $height / 2 solid transparent;
		border-right: $width solid $color;
	}

	// Up

	@if $direction == up {
		border-left: $width / 2 solid transparent;
		border-right: $width / 2 solid transparent;
		border-bottom: $height solid $color;
	}

	// Down

	@if $direction == down {
		border-left: $width / 2 solid transparent;
		border-right: $width / 2 solid transparent;
		border-top: $height solid $color;
	}
}
// Sass Elements

@mixin bordered($top-color: #EEE, $right-color: #EEE, $bottom-color: #EEE, $left-color: #EEE) {
	border-top: solid 1px $top-color;
	border-left: solid 1px $left-color;
	border-right: solid 1px $right-color;
	border-bottom: solid 1px $bottom-color;
}

@mixin drop-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
	-webkit-box-shadow: $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
	-moz-box-shadow: $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
	box-shadow: $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
}

@mixin rounded($radius: 2px) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	border-radius: $radius;
}

@mixin border-radius($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
	-webkit-border-top-right-radius: $topright;
	-webkit-border-bottom-right-radius: $bottomright;
	-webkit-border-bottom-left-radius: $bottomleft;
	-webkit-border-top-left-radius: $topleft;
	-moz-border-radius-topright: $topright;
	-moz-border-radius-bottomright: $bottomright;
	-moz-border-radius-bottomleft: $bottomleft;
	-moz-border-radius-topleft: $topleft;
	border-top-right-radius: $topright;
	border-bottom-right-radius: $bottomright;
	border-bottom-left-radius: $bottomleft;
	border-top-left-radius: $topleft;
}

@mixin opacity($opacity: 0.5) {
	-moz-opacity: $opacity;
	-khtml-opacity: $opacity;
	-webkit-opacity: $opacity;
	opacity: $opacity;
	$opperc: $opacity * 100;
}

@mixin transform($arguments) {
	-webkit-transform: $arguments;
	-moz-transform: $arguments;
	-o-transform: $arguments;
	-ms-transform: $arguments;
	transform: $arguments;
}

@mixin rotation($deg: 5deg) {
}

@mixin scale($ratio: 1.5) {
}

@mixin inner-shadow($horizontal: 0, $vertical: 1px, $blur: 2px, $alpha: 0.4) {
	-webkit-box-shadow: inset $horizontal $vertical $blur rgba(0, 0, 0, $alpha);
	-moz-box-shadow: inset $horizontal $vertical $blur rgba(0, 0, 0, $alpha);
	box-shadow: inset $horizontal $vertical $blur rgba(0, 0, 0, $alpha);
}

@mixin box-shadow($arguments) {
	-webkit-box-shadow: $arguments;
	-moz-box-shadow: $arguments;
	box-shadow: $arguments;
}

@mixin box-sizing($sizing: border-box) {
	-ms-box-sizing: $sizing;
	-moz-box-sizing: $sizing;
	-webkit-box-sizing: $sizing;
	box-sizing: $sizing;
}

@mixin user-select($argument: none) {
	-webkit-user-select: $argument;
	-moz-user-select: $argument;
	-ms-user-select: $argument;
	user-select: $argument;
}

@mixin columns($colwidth: 250px, $colcount: 0, $colgap: 50px, $columnRuleColor: #EEE, $columnRuleStyle: solid, $columnRuleWidth: 1px) {
	-moz-column-width: $colwidth;
	-moz-column-count: $colcount;
	-moz-column-gap: $colgap;
	-moz-column-rule-color: $columnRuleColor;
	-moz-column-rule-style: $columnRuleStyle;
	-moz-column-rule-width: $columnRuleWidth;
	-webkit-column-width: $colwidth;
	-webkit-column-count: $colcount;
	-webkit-column-gap: $colgap;
	-webkit-column-rule-color: $columnRuleColor;
	-webkit-column-rule-style: $columnRuleStyle;
	-webkit-column-rule-width: $columnRuleWidth;
	column-width: $colwidth;
	column-count: $colcount;
	column-gap: $colgap;
	column-rule-color: $columnRuleColor;
	column-rule-style: $columnRuleStyle;
	column-rule-width: $columnRuleWidth;
}

@mixin translate($x: 0, $y: 0) {
}

@mixin background-clip($argument: padding-box) {
	-moz-background-clip: $argument;
	-webkit-background-clip: $argument;
	background-clip: $argument;
}
// Angle Mixin

@mixin angle($pseudo, $flip: false, $angle: 1.5deg) {

	@if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {
		position: relative;
		z-index: 1;
		$selector: if($pseudo == 'both', '&:before, &:after', '&:#{$pseudo}');

		#{$selector} {
			background: inherit;
			content: '';
			display: block;
			height: 50%;
			left: 0;
			position: absolute;
			right: 0;
			z-index: -1;
			-webkit-backface-visibility: hidden; // for Chrome Windows
			padding: rem(1); // for Chrome Mac
			-webkit-background-clip: content-box;  // for Chrome Mac
		}

		@if $pseudo == 'before' {
			#{$selector} {
				top: 0;

				@if $flip {
					transform: skewY($angle * -1);
					transform-origin: 0 0;
				}

				@else {
					transform: skewY($angle);
					transform-origin: 100% 0;
				}
			}
		}

		@if $pseudo == 'after' {
			#{$selector} {
				bottom: 0;

				@if $flip {
					transform: skewY($angle);
					transform-origin: 0 100%;
				}

				@else {
					transform: skewY($angle * -1);
					transform-origin: 100%;
				}
			}
		}

		@if $pseudo == 'both' {
			&::before {
				top: 0;

				@if $flip {
					transform: skewY($angle * -1);
					transform-origin: 0 0;
				}

				@else {
					transform: skewY($angle);
					transform-origin: 100% 0;
				}
			}

			&::after {
				bottom: 0;

				@if $flip {
					transform: skewY($angle);
					transform-origin: 0 0;
				}

				@else {
					transform: skewY($angle * -1);
					transform-origin: 100%;
				}
			}
		}
	}
}
